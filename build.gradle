buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.palantir:gradle-baseline-java:${baselineVersion}"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:${bintrayPlugin}"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0"
    }
}

plugins {
    id 'com.palantir.docker-test-runner' version '0.1.1'
    id 'com.palantir.git-version' version '0.4.0'
    id 'org.inferred.processors' version '1.1.2'
    id 'com.palantir.jacoco-full-report' version '0.3.0'
}

apply plugin: 'com.palantir.baseline-config' // provides baselineUpdateConfig task
apply plugin: 'com.palantir.baseline-idea'

repositories {
    jcenter() // needed for baselineUpdateConfig task
}

allprojects {
    version gitVersion()
    group 'com.palantir.config.crypto'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-findbugs'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'com.palantir.docker-test-runner'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.bintray'

    dockerTestRunner {
        dockerRunner name: 'openjdk-7-bouncy-castle',
                     dockerFile: file(rootDir.absolutePath + '/test-environments/openjdk-7-bouncy-castle.dockerfile')

        jacocoConfig = {
            classDirectories = project.files(classDirectories.files.collect {
                // Exclusion path is project-relative and has a base of compiled classes
                project.fileTree(dir: it, exclude: '**/Immutable*.class')
            })
        }

        if (System.env.CIRCLE_TEST_REPORTS) {
            runArgs.put('-v', "${System.env.CIRCLE_TEST_REPORTS}:/reports")
            runArgs.put('-e', 'CIRCLE_TEST_REPORTS=/reports')
        }
    }

    repositories {
        jcenter()
    }

    javadoc {
        classpath = sourceSets.main.compileClasspath + configurations.processor
    }

    sourceCompatibility = 1.7

    jacocoTestReport {
        reports {
            xml.enabled = true
        }
        // Ignore Immutables-generated code from coverage checks
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                // Exclusion path is project-relative and has a base of compiled classes
                fileTree(dir: it, exclude: '**/Immutable*.class')
            })
        }
    }
    tasks.jacocoTestReport.dependsOn(tasks.test)

    task resolveDependencies {
        description = 'Forces the resolution of all dependencies in all configurations'
        group = 'build'

        doLast {
            configurations.all { c ->
                c.resolve()
            }
        }
    }

    if (System.env.CIRCLE_TEST_REPORTS) {
        test.reports.junitXml.destination = new File(System.env.CIRCLE_TEST_REPORTS, it.getName())
    }
}
