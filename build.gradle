buildscript {
    repositories {
        jcenter()
        maven { url "http://palantir.bintray.com/releases" }
    }

    dependencies {
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:0.4.10'
        classpath 'com.netflix.nebula:nebula-dependency-recommender:6.0.0'
        classpath 'com.palantir.configurationresolver:gradle-configuration-resolver-plugin:0.3.0'
        classpath 'com.palantir.gradle.docker:gradle-docker:0.12.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:0.20.1'
    }
}

plugins {
    id 'com.palantir.git-version' version '0.5.2'
    id 'org.inferred.processors' version '3.3.0'
}

repositories {
    jcenter()
    maven { url "http://palantir.bintray.com/releases" }
}

apply plugin: 'com.palantir.external-publish'
apply plugin: 'com.palantir.baseline-config'
apply plugin: 'com.palantir.baseline-idea'
apply plugin: 'org.inferred.processors'

dependencies {
    baseline 'com.palantir.baseline:gradle-baseline-java-config:0.20.1@zip'
}

allprojects {
    apply plugin: 'nebula.dependency-recommender'
    apply plugin: 'com.palantir.configuration-resolver'

    version gitVersion()
    group 'com.palantir.config.crypto'

    dependencyRecommendations {
        strategy OverrideTransitives
        propertiesFile file: project.rootProject.file('version.props')
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.palantir.baseline-checkstyle'
    apply plugin: 'com.palantir.baseline-eclipse'
    apply plugin: 'com.palantir.baseline-error-prone'
    apply plugin: 'com.palantir.baseline-idea'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'maven-publish'

    repositories {
        jcenter()
        maven { url "http://palantir.bintray.com/releases" }
    }

    javadoc {
        classpath = sourceSets.main.compileClasspath + configurations.processor
    }

    sourceCompatibility = 1.8

    tasks.check.dependsOn(javadoc)

    if (System.env.CIRCLECI) {
        test.reports.junitXml.destination = new File(System.env.TESTS_DIR, it.getName())
    }

    compileJava {
        options.compilerArgs += [
            '-XepDisableWarningsInGeneratedCode',
            '-Xep:OptionalEquality:WARN',
            '-Werror' 
        ]
    }
}
