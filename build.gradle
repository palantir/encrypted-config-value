buildscript {
    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
        gradlePluginPortal() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    dependencies {
        classpath 'com.palantir.gradle.failure-reports:gradle-failure-reports:1.6.0'
        classpath 'com.palantir.jakartapackagealignment:jakarta-package-alignment:0.6.0'
        classpath 'com.palantir.gradle.jdks:gradle-jdks:0.36.0'
        classpath 'com.palantir.gradle.jdkslatest:gradle-jdks-latest:0.13.0'
        classpath 'com.palantir.javaformat:gradle-palantir-java-format:2.40.0'
        classpath 'com.palantir.gradle.externalpublish:gradle-external-publish-plugin:1.15.0'
        classpath 'com.palantir.gradle.docker:gradle-docker:0.27.0'
        classpath 'com.palantir.baseline:gradle-baseline-java:5.42.0'
        classpath 'com.palantir.gradle.consistentversions:gradle-consistent-versions:2.21.0'
    }
}

plugins {
id 'com.palantir.git-version' version '3.0.0'
id 'org.inferred.processors' version '3.7.0'
}

repositories {
    mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
}

apply plugin: 'com.palantir.baseline'
apply plugin: 'com.palantir.consistent-versions'
apply plugin: 'com.palantir.external-publish'
apply plugin: 'org.inferred.processors'
apply plugin: 'com.palantir.baseline-java-versions'
apply plugin: 'com.palantir.jdks.latest'
apply plugin: 'com.palantir.failure-reports'

allprojects {
    apply plugin: 'com.palantir.java-format'
    apply plugin: 'com.palantir.jakarta-package-alignment'
    version gitVersion()
    group 'com.palantir.config.crypto'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.inferred.processors'
    apply plugin: 'maven-publish'
    apply plugin: 'com.palantir.baseline-class-uniqueness'
    apply plugin: 'com.palantir.baseline-exact-dependencies'

    repositories {
        mavenCentral() { metadataSources { mavenPom(); ignoreGradleMetadataRedirection() } }
    }

    tasks.withType(Test) {
        useJUnitPlatform {
            includeEngines 'jqwik', 'junit-jupiter'
        }
        maxParallelForks Runtime.getRuntime().availableProcessors()
        testLogging {
            events "passed", "skipped", "failed"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }
    }

    tasks.check.dependsOn(checkImplicitDependencies)
    tasks.check.dependsOn(checkUnusedDependencies)
    tasks.check.dependsOn(javadoc)
}

javaVersions {
    libraryTarget = 11
    runtime = 21
}
